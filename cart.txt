'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { useRouter } from 'next/navigation';
import { useCart } from '@/hooks/use-cart';
import type { Product } from '@/types';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardFooter, CardHeader } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Trash2, ShoppingCart, ArrowLeft, Plus, Minus, Sparkles, Package } from 'lucide-react';
import { Skeleton } from '@/components/ui/skeleton';
import { fetchProductById } from '@/lib/data/product';
import { ref, getDownloadURL } from 'firebase/storage';
import { storage } from '@/firebase/firebaseConfig';

interface CartDisplayItem {
id: string;
name: string;
price: number;
quantity: number;
category?: string;
displayImageUrl?: string;
variantName?: string;

personalization?: {
options: Array<{
name: string;
value: string;
extraCost?: number;
}>;
totalExtraCost: number;
};

}

export default function CartPage() {
const { cartItems, removeFromCart, updateQuantity, getCartItemCount, isCartInitialized, clearCart } = useCart();
const [displayItems, setDisplayItems] = useState<CartDisplayItem[]>([]);
const [isLoading, setIsLoading] = useState(true);
const [isUserLoggedIn, setIsUserLoggedIn] = useState(false);
const [removingItems, setRemovingItems] = useState<Set<string>>(new Set());
const [updatingQuantity, setUpdatingQuantity] = useState<Set<string>>(new Set());
const [isClearingCart, setIsClearingCart] = useState(false);
const router = useRouter();
const [productDetailsCache, setProductDetailsCache] = useState<Record<string, Product>>({});
const [imageUrlCache, setImageUrlCache] = useState<Record<string, string>>({});

useEffect(() => {
if (typeof window !== 'undefined') {
setIsUserLoggedIn(localStorage.getItem('isLoggedIn') === 'true');
}
}, []);

useEffect(() => {
if (!isCartInitialized) return;

const idsToFetch = cartItems
.map(item => item.productId)
.filter(id => !productDetailsCache[id]);

if (idsToFetch.length > 0) {
const fetchDetails = async () => {
try {
const fetchedDetailsPromises = idsToFetch.map(id => fetchProductById(id));
const fetchedDetailsArray = (await Promise.all(fetchedDetailsPromises)).filter(Boolean) as Product[];

if (fetchedDetailsArray.length > 0) {
setProductDetailsCache(prevCache => {
const newCacheEntries: Record<string, Product> = {};
fetchedDetailsArray.forEach(p => {
if (p && !prevCache[p.id]) {
newCacheEntries[p.id] = p;
}
});
return { ...prevCache, ...newCacheEntries };
});
}
} catch (error) {
}
};
fetchDetails();
} else if (cartItems.length === 0 && Object.keys(productDetailsCache).length > 0) {
setProductDetailsCache({});
}
}, [cartItems, isCartInitialized]);

useEffect(() => {
if (!storage || !cartItems || cartItems.length === 0) return;

const fetchImagesForCartItems = async () => {
const itemsNeedingImages = cartItems
.filter(item => !imageUrlCache[item.productId] && item.productImage);

try {
const imagePromises = itemsNeedingImages.map(async (item) => {
try {
const imagePath = item.productImage;
if (!imagePath) return null;

if (imagePath.startsWith('http://') || imagePath.startsWith('https://')) {
return { id: item.productId, url: imagePath };
}

const imageRef = ref(storage, imagePath);
const downloadUrl = await getDownloadURL(imageRef);
return { id: item.productId, url: downloadUrl };
} catch (imgError) {
return null;
}
});

const resolvedImages = (await Promise.all(imagePromises)).filter(Boolean);
if (resolvedImages.length > 0) {
setImageUrlCache(prevCache => {
const newCache = { ...prevCache };
resolvedImages.forEach(item => {
if (item) newCache[item.id] = item.url;
});
return newCache;
});
}
} catch (error) {
console.error('', error);
}
};

fetchImagesForCartItems();
}, [cartItems]);

useEffect(() => {
if (!isCartInitialized) {
setIsLoading(true);
return;
}

if (!cartItems || cartItems.length === 0) {
setDisplayItems([]);
setIsLoading(false);
return;
}

const waitingForDetails = cartItems.some(item => !productDetailsCache[item.productId]);
const waitingForImages = cartItems.some(item => item.productImage && !imageUrlCache[item.productId]);

setIsLoading(waitingForDetails || waitingForImages);

const newDisplayItems = cartItems.map(cartItem => {
const productDetail = productDetailsCache[cartItem.productId];
const imageUrl = imageUrlCache[cartItem.productId];

const price = typeof cartItem.price === 'number' ? cartItem.price : 0;
const personalizationCost = cartItem.personalization?.totalExtraCost || 0;
const totalItemPrice = price + personalizationCost;

return {
id: cartItem.productId,
name: cartItem.productName || (productDetail?.name || 'Product'),
price: totalItemPrice,
quantity: cartItem.quantity,
category: productDetail?.category,
displayImageUrl: imageUrl || '/placeholder-product.png',
personalization: cartItem.personalization,
gst: cartItem.gst || 0,
hsnCode: cartItem.hsnCode || '',
variantName: cartItem.variantName || '',
variantCombinationId: cartItem.variantCombinationId || '',
};
});


setDisplayItems(newDisplayItems);
}, [cartItems, productDetailsCache, imageUrlCache, isCartInitialized]);

const handleQuantityChange = async (productId: string, newQuantity: number) => {
const clampedQuantity = Math.max(1, Math.min(newQuantity, 10));
setUpdatingQuantity(prev => new Set(prev).add(productId));

// Add a small delay for animation effect
setTimeout(() => {
updateQuantity(productId, clampedQuantity);
setUpdatingQuantity(prev => {
const next = new Set(prev);
next.delete(productId);
return next;
});
}, 150);
};

const handleInputQuantityChange = (productId: string, value: string) => {
const quantityNum = parseInt(value, 10);
if (!isNaN(quantityNum)) {
handleQuantityChange(productId, quantityNum);
}
};

const handleRemove = async (productId: string) => {
setRemovingItems(prev => new Set(prev).add(productId));

// Add delay for exit animation
setTimeout(() => {
removeFromCart(productId);
setRemovingItems(prev => {
const next = new Set(prev);
next.delete(productId);
return next;
});
}, 300);
};

const handleClearCart = async () => {
setIsClearingCart(true);

// Add delay for animation effect
setTimeout(() => {
clearCart();
setIsClearingCart(false);
}, 300);
};

const handleProceedToCheckout = () => {
router.push(isUserLoggedIn ? '/checkout/address' : '/login?redirect=/checkout/address');
};

const subtotal = displayItems.reduce((sum, item) => {
const price = typeof item.price === 'number' ? item.price : 0;
const quantity = typeof item.quantity === 'number' ? item.quantity : 0;
return sum + (price * quantity);
}, 0);

const itemCount = getCartItemCount() || 0;

// Enhanced Loading Skeleton Component
const LoadingSkeleton = () => (
<div className="animate-pulse space-y-6">
<div className="flex justify-between items-center">
<div className="h-8 bg-gradient-to-r from-gray-200 to-gray-300 rounded-lg w-64"></div>
<div className="h-10 bg-gradient-to-r from-gray-200 to-gray-300 rounded-lg w-40"></div>
</div>

<Card className="overflow-hidden border-0 shadow-lg bg-gradient-to-br from-white to-gray-50">
<CardContent className="p-6">
<div className="space-y-4">
{Array.from({ length: 3 }).map((_, index) => (
<div key={index} className="flex items-center space-x-4 p-4 rounded-xl bg-white shadow-sm">
<div className="h-20 w-20 bg-gradient-to-br from-gray-200 to-gray-300 rounded-xl animate-pulse"></div>
<div className="flex-1 space-y-2">
<div className="h-5 bg-gradient-to-r from-gray-200 to-gray-300 rounded w-3/4"></div>
<div className="h-4 bg-gradient-to-r from-gray-200 to-gray-300 rounded w-1/2"></div>
</div>
<div className="space-y-2">
<div className="h-6 bg-gradient-to-r from-gray-200 to-gray-300 rounded w-16"></div>
<div className="h-8 bg-gradient-to-r from-gray-200 to-gray-300 rounded w-24"></div>
</div>
</div>
))}
</div>
</CardContent>
</Card>
</div>
);

// Loading state with enhanced skeleton
if (!isCartInitialized || (isLoading && displayItems.length < (cartItems?.length || 0))) {
return (
<div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
<div className="container mx-auto py-8 px-4">
<LoadingSkeleton />
</div>
</div>
);
}

// Enhanced Empty Cart
if (itemCount === 0 && !isLoading) {
return (
<div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 flex items-center justify-center">
<div className="text-center animate-fade-in">
<div className="relative mb-8 inline-block">
<div className="absolute inset-0 bg-gradient-to-r from-blue-400 to-purple-400 rounded-full blur-xl opacity-30 animate-pulse"></div>
<div className="relative bg-white p-8 rounded-full shadow-xl">
<ShoppingCart className="h-16 w-16 text-gray-400 mx-auto animate-bounce" />
</div>
</div>

<h1 className="text-4xl font-bold bg-gradient-to-r from-gray-700 to-gray-900 bg-clip-text text-transparent mb-4">
Your cart is empty
</h1>
<p className="text-gray-600 text-lg mb-8 max-w-md mx-auto">
Discover amazing products and start building your perfect collection.
</p>

<Button
asChild
size="lg"
className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white px-8 py-3 rounded-full shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300"
>
<Link href="/">
<ArrowLeft className="mr-2 h-5 w-5" />
Start Shopping
</Link>
</Button>
</div>
</div>
);
}

// Enhanced Cart with Items
return (
<div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
<div className="container mx-auto py-8 px-4">
{/* Enhanced Header */}
<div className="mb-8 animate-fade-in">
<div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 mb-4">
<div className="flex items-center gap-3">
<div className="relative">
<Package className="h-8 w-8 text-blue-600" />
<div className="absolute -top-1 -right-1 bg-gradient-to-r from-blue-500 to-purple-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center font-bold animate-pulse">
{itemCount}
</div>
</div>
<h1 className="text-3xl sm:text-4xl font-bold bg-gradient-to-r from-gray-800 to-gray-600 bg-clip-text text-transparent">
Shopping Cart
</h1>
</div>

<div className="flex gap-2">
<Button
variant="outline"
asChild
className="group hover:bg-blue-50 border-blue-200 hover:border-blue-300 transition-all duration-300"
>
<Link href="/">
<ArrowLeft className="mr-2 h-4 w-4 group-hover:-translate-x-1 transition-transform duration-300" />
Continue Shopping
</Link>
</Button>

<Button
variant="outline"
onClick={handleClearCart}
disabled={isClearingCart}
className="group hover:bg-red-50 border-red-200 hover:border-red-300 text-red-600 hover:text-red-700 transition-all duration-300"
>
{isClearingCart ? (
<div className="flex items-center gap-2">
<div className="w-4 h-4 border-2 border-red-600 border-t-transparent rounded-full animate-spin"></div>
Clearing...
</div>
) : (
<>
<Trash2 className="mr-2 h-4 w-4 group-hover:scale-110 transition-transform duration-300" />
Clear Cart
</>
)}
</Button>
</div>
</div>

<div className="text-gray-600 flex items-center gap-2">
<Sparkles className="h-4 w-4 text-yellow-500" />
<span>{itemCount} {itemCount === 1 ? 'item' : 'items'} in your cart</span>
</div>
</div>

<Card className="shadow-2xl border-0 bg-white/80 backdrop-blur-sm overflow-hidden animate-slide-up">
{/* Desktop view */}
<div className="hidden sm:block">
<CardContent className="p-0">
<div className="bg-gradient-to-r from-gray-50 to-gray-100 px-6 py-4">
<div className="grid grid-cols-5 gap-4 text-sm font-semibold text-gray-700">
<div>Product</div>
<div>Price</div>
<div className="text-center">Quantity</div>
<div className="text-right">Total</div>
<div className="text-right">Action</div>
</div>
</div>

<div className="divide-y divide-gray-100">
{displayItems.map((item, index) => {
const price = typeof item.price === 'number' ? item.price : 0;
const quantity = typeof item.quantity === 'number' ? item.quantity : 0;
const totalPrice = price * quantity;
const isRemoving = removingItems.has(item.id);
const isUpdating = updatingQuantity.has(item.id);

return (
<div
key={`${item.id}-${index}`}
className={`grid grid-cols-5 gap-4 p-6 items-center transition-all duration-300 hover:bg-gray-50 ${
isRemoving ? 'opacity-0 transform scale-95' : 'animate-fade-in-up'
} ${isUpdating ? 'bg-blue-50' : ''}`}
style={{ animationDelay: `${index * 100}ms` }}
>
<div className="flex items-center space-x-4">
<div className="relative group">
<Image
src={item.displayImageUrl || '/placeholder-product.png'}
alt={item.name || 'Product'}
width={80}
height={80}
className="rounded-xl object-cover shadow-md group-hover:shadow-lg transition-shadow duration-300"
unoptimized
/>
<div className="absolute inset-0 bg-black/0 group-hover:bg-black/10 rounded-xl transition-colors duration-300"></div>
</div>
<div className="space-y-1">
<Link
href={`/product/${item.id}`}
className="font-semibold text-gray-800 hover:text-blue-600 transition-colors duration-300 line-clamp-2"
>
{item.name || 'Product'}
</Link>
{item.variantName && (
<p className="text-xs text-gray-600">Variant: {item.variantName}</p>
)}

{item.category && (
<span className="text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded-full">
{item.category}
</span>
)}

{item.personalization && item.personalization.options && item.personalization.options.length > 0 && (
<div className="text-xs text-emerald-600 flex items-center gap-1">
<Sparkles className="h-3 w-3" />
<span className="font-medium">Customized</span>
{item.personalization.totalExtraCost > 0 && (
<span>(+â‚¹{item.personalization.totalExtraCost.toFixed(2)})</span>
)}
</div>
)}
</div>
</div>

<div className="font-semibold text-gray-800">
â‚¹{price.toFixed(2)}
</div>

<div className="flex items-center justify-center">
<div className="flex items-center gap-2 bg-gray-50 rounded-full p-1">
<Button
type="button"
size="icon"
variant="ghost"
className="h-8 w-8 rounded-full hover:bg-white hover:shadow-md transition-all duration-300"
onClick={() => handleQuantityChange(item.id, item.quantity - 1)}
disabled={item.quantity <= 1 || isUpdating}
>
<Minus className="h-3 w-3" />
</Button>
<Input
type="number"
min="1"
max="10"
value={item.quantity}
onChange={(e) => handleInputQuantityChange(item.id, e.target.value)}
className={`w-16 h-8 text-center text-sm border-0 bg-transparent font-semibold ${
isUpdating ? 'animate-pulse' : ''
}`}
disabled={isUpdating}
/>
<Button
type="button"
size="icon"
variant="ghost"
className="h-8 w-8 rounded-full hover:bg-white hover:shadow-md transition-all duration-300"
onClick={() => handleQuantityChange(item.id, item.quantity + 1)}
disabled={item.quantity >= 10 || isUpdating}
>
<Plus className="h-3 w-3" />
</Button>
</div>
</div>

<div className="text-right font-bold text-lg text-gray-800">
â‚¹{totalPrice.toFixed(2)}
</div>

<div className="text-right">
<Button
variant="ghost"
size="icon"
onClick={() => handleRemove(item.id)}
className="text-red-400 hover:text-red-600 hover:bg-red-50 rounded-full transition-all duration-300 transform hover:scale-110"
disabled={isRemoving}
>
<Trash2 className={`h-4 w-4 ${isRemoving ? 'animate-spin' : ''}`} />
</Button>
</div>
</div>
);
})}
</div>
</CardContent>
</div>

{/* Enhanced Mobile view */}
<div className="sm:hidden">
<CardContent className="p-4">
<div className="space-y-4">
{displayItems.map((item, index) => {
const price = typeof item.price === 'number' ? item.price : 0;
const quantity = typeof item.quantity === 'number' ? item.quantity : 0;
const totalPrice = price * quantity;
const isRemoving = removingItems.has(item.id);
const isUpdating = updatingQuantity.has(item.id);

return (
<div
key={`mobile-item-${item.id}-${index}`}
className={`bg-white rounded-2xl p-4 shadow-lg border border-gray-100 transition-all duration-300 ${
isRemoving ? 'opacity-0 transform scale-95' : 'animate-fade-in-up hover:shadow-xl'
} ${isUpdating ? 'bg-blue-50 border-blue-200' : ''}`}
style={{ animationDelay: `${index * 100}ms` }}
>
<div className="flex gap-4 mb-4">
<div className="relative">
<Image
src={item.displayImageUrl || '/placeholder-product.png'}
alt={item.name || 'Product'}
width={80}
height={80}
className="rounded-xl object-cover shadow-md"
unoptimized
/>
</div>
<div className="flex-1 space-y-2">
<Link
href={`/product/${item.id}`}
className="font-semibold text-gray-800 hover:text-blue-600 block line-clamp-2 transition-colors duration-300"
>
{item.name || 'Product'}
</Link>

{item.variantName && (
<p className="text-xs text-gray-600">Variant: {item.variantName}</p>
)}





{item.category && (
<span className="text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded-full inline-block">
{item.category}
</span>
)}

{item.personalization && item.personalization.options && item.personalization.options.length > 0 && (
<div className="text-xs text-emerald-600 flex items-center gap-1">
<Sparkles className="h-3 w-3" />
<span className="font-medium">Customized</span>
{item.personalization.totalExtraCost > 0 && (
<span>(+â‚¹{item.personalization.totalExtraCost.toFixed(2)})</span>
)}
</div>
)}

<div className="text-lg font-semibold text-gray-800">
â‚¹{price.toFixed(2)}
</div>
</div>
</div>

<div className="flex items-center justify-between pt-4 border-t border-gray-100">
<div className="flex items-center gap-2 bg-gray-50 rounded-full p-1">
<Button
type="button"
size="icon"
variant="ghost"
className="h-8 w-8 rounded-full hover:bg-white transition-all duration-300"
onClick={() => handleQuantityChange(item.id, item.quantity - 1)}
disabled={item.quantity <= 1 || isUpdating}
>
<Minus className="h-3 w-3" />
</Button>
<Input
type="number"
min="1"
max="10"
value={item.quantity}
onChange={(e) => handleInputQuantityChange(item.id, e.target.value)}
className={`w-16 h-8 text-center text-sm border-0 bg-transparent font-semibold ${
isUpdating ? 'animate-pulse' : ''
}`}
disabled={isUpdating}
/>
<Button
type="button"
size="icon"
variant="ghost"
className="h-8 w-8 rounded-full hover:bg-white transition-all duration-300"
onClick={() => handleQuantityChange(item.id, item.quantity + 1)}
disabled={item.quantity >= 10 || isUpdating}
>
<Plus className="h-3 w-3" />
</Button>
</div>

<div className="font-bold text-lg text-gray-800">
â‚¹{totalPrice.toFixed(2)}
</div>

<Button
variant="ghost"
size="sm"
onClick={() => handleRemove(item.id)}
className="text-red-400 hover:text-red-600 hover:bg-red-50 rounded-full p-2 transition-all duration-300"
disabled={isRemoving}
>
<Trash2 className={`h-4 w-4 ${isRemoving ? 'animate-spin' : ''}`} />
</Button>
</div>
</div>
);
})}
</div>
</CardContent>
</div>

{/* Enhanced Footer */}
<CardFooter className="bg-gradient-to-r from-gray-50 to-gray-100 p-6 border-t border-gray-200">
<div className="flex flex-col sm:flex-row justify-between items-center w-full space-y-4 sm:space-y-0">
<div className="text-center sm:text-left">
<div className="text-sm text-gray-600 mb-1">Total Amount</div>
<div className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
â‚¹{subtotal.toFixed(2)}
</div>
</div>

<Button
size="lg"
className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white px-8 py-3 rounded-full shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 w-full sm:w-auto"
onClick={handleProceedToCheckout}
disabled={isLoading}
>
{isLoading ? (
<div className="flex items-center gap-2">
<div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
Processing...
</div>
) : (
'Proceed to Checkout'
)}
</Button>
</div>
</CardFooter>
</Card>
</div>

<style jsx>{`
@keyframes fade-in {
from { opacity: 0; }
to { opacity: 1; }
}

@keyframes slide-up {
from {
opacity: 0;
transform: translateY(20px);
}
to {
opacity: 1;
transform: translateY(0);
}
}

@keyframes fade-in-up {
from {
opacity: 0;
transform: translateY(10px);
}
to {
opacity: 1;
transform: translateY(0);
}
}

.animate-fade-in {
animation: fade-in 0.6s ease-out;
}

.animate-slide-up {
animation: slide-up 0.8s ease-out;
}

.animate-fade-in-up {
animation: fade-in-up 0.5s ease-out forwards;
}

.line-clamp-2 {
display: -webkit-box;
- webkit-line-clamp: 2;
- webkit-box-orient: vertical;
overflow: hidden;
}
`}</style>
</div>
);
}
