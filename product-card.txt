'use client';

import { useEffect, useRef, useState, useCallback } from 'react';
import Link from 'next/link';
import {
Card,
CardContent,
CardFooter,
CardHeader,
CardTitle,
CardDescription,
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import {
Star,
ShoppingCart,
Minus,
Plus,
ChevronLeft,
ChevronRight,
ImagePlus,
Heart,
Sparkles,
Zap,
Eye,
Share2,
Clock,
Truck,
Shield,
Gift,
Flame,
TrendingUp,
Award,
} from 'lucide-react';
import type { Product } from '@/types';
import { useCart } from '@/hooks/use-cart';
import { useWishlist } from '@/hooks/use-wishlist';

interface ExtendedProduct extends Product {
hasVariants?: boolean;
hasCustomization?: boolean;
variants?: Array<{
name: string;
options: string[];
}>;
variantCombinations?: Array<{
id: string;
combinationString: string;
attributes: Record<string, string>;
price: number;
images?: string[];
}>;
}


interface ProductCardProps {
product: ExtendedProduct;
variant?: 'default' | 'compact' | 'featured';
showQuickActions?: boolean;
enableHoverEffects?: boolean;
showComparisonButton?: boolean;
}

export function ProductCard({
product,
variant = 'default',
showQuickActions = true,
enableHoverEffects = true,
showComparisonButton = false,
}: ProductCardProps) {
const {
addToCart,
updateQuantity,
removeFromCart,
getItemQuantity,
} = useCart();
const { toggleWishlistItem, isInWishlist } = useWishlist();

const quantity = getItemQuantity(product.id);
const [wishlistActive, setWishlistActive] = useState(false);
const [justAdded, setJustAdded] = useState(false);
const [isHovered, setIsHovered] = useState(false);
const [showQuickView, setShowQuickView] = useState(false);

useEffect(() => {
setWishlistActive(isInWishlist(product.id));
}, [product.id, isInWishlist]);

const [currentImageIndex, setCurrentImageIndex] = useState(0);
const [isImageLoading, setIsImageLoading] = useState(true);
const [imageError, setImageError] = useState(false);
const imageRef = useRef<HTMLImageElement>(null);
const cardRef = useRef<HTMLDivElement>(null);

// Auto-slide images on hover
const [autoSlideInterval, setAutoSlideInterval] = useState<NodeJS.Timeout | null>(null);

const startAutoSlide = useCallback(() => {
if (product.images && product.images.length > 1 && enableHoverEffects) {
const interval = setInterval(() => {
setCurrentImageIndex((prev) =>
prev === product.images!.length - 1 ? 0 : prev + 1
);
}, 2000);
setAutoSlideInterval(interval);
}
}, [product.images, enableHoverEffects]);

const stopAutoSlide = useCallback(() => {
if (autoSlideInterval) {
clearInterval(autoSlideInterval);
setAutoSlideInterval(null);
}
}, [autoSlideInterval]);

const handleMouseEnter = () => {
if (enableHoverEffects) {
setIsHovered(true);
startAutoSlide();
}
};

const handleMouseLeave = () => {
if (enableHoverEffects) {
setIsHovered(false);
stopAutoSlide();
}
};

const handleAddToCart = () => {
addToCart(product, 1);
setJustAdded(true);
setTimeout(() => setJustAdded(false), 1500);
};

const handleIncrease = () => {
updateQuantity(product.id, quantity + 1);
};

const handleDecrease = () => {
if (quantity > 1) {
updateQuantity(product.id, quantity - 1);
} else {
removeFromCart(product.id);
}
};

const handleToggleWishlist = (e: React.MouseEvent) => {
e.preventDefault();
e.stopPropagation();

const modifiedProduct = {
...product,
name: 'Item',
};

toggleWishlistItem(modifiedProduct);
};

const handleShare = async (e: React.MouseEvent) => {
e.preventDefault();
e.stopPropagation();

if (navigator.share) {
try {
await navigator.share({
title: product.name,
text: `Check out ${product.name}`,
url: `/product/${product.id}`,
});
} catch (error) {
// Fallback to clipboard
navigator.clipboard.writeText(`${window.location.origin}/product/${product.id}`);
}
} else {
navigator.clipboard.writeText(`${window.location.origin}/product/${product.id}`);
}
};

const handleImageLoad = () => {
setIsImageLoading(false);
setImageError(false);
};

const handleImageError = () => {
setIsImageLoading(false);
setImageError(true);
};

const nextImage = () => {
if (product.images && product.images.length > 1) {
setCurrentImageIndex((prev) =>
prev === product.images.length - 1 ? 0 : prev + 1
);
setIsImageLoading(true);
setImageError(false);
}
};

const prevImage = () => {
if (product.images && product.images.length > 1) {
setCurrentImageIndex((prev) =>
prev === 0 ? product.images.length - 1 : prev - 1
);
setIsImageLoading(true);
setImageError(false);
}
};

useEffect(() => {
if (imageRef.current) {
imageRef.current.classList.add('opacity-0');
setTimeout(() => {
if (imageRef.current) {
imageRef.current.classList.remove('opacity-0');
}
}, 100);
}
}, [currentImageIndex]);

const price =
typeof product.price === 'number' && !isNaN(product.price) ? product.price : 0;
const originalPrice =
typeof product.originalPrice === 'number' && !isNaN(product.originalPrice)
? product.originalPrice
: null;
const rating =
typeof product.rating === 'number' && !isNaN(product.rating) ? product.rating : null;
const hasMultipleImages = product.images && product.images.length > 1;
const hasDiscount = originalPrice !== null && originalPrice > price;
const discountPercentage = hasDiscount ? Math.round(((originalPrice! - price) / originalPrice!) * 100) : 0;

// Product status indicators
const isNewProduct = product.isNew || false;
const isBestseller = product.isBestseller || false;
const isTrending = product.isTrending || false;
const isLimitedTime = product.isLimitedTime || false;
const hasFreeSHipping = product.freeShipping || false;
const hasWarranty = product.warranty || false;

const getCardSizeClasses = () => {
switch (variant) {
case 'compact':
return 'h-80';
case 'featured':
return 'h-96 md:h-104';
default:
return 'h-full';
}
};

const renderStarRating = (rating: number) => {
const stars = [];
const roundedRating = Math.round(rating * 2) / 2;

for (let i = 1; i <= 5; i++) {
if (i <= roundedRating) {
stars.push(
<Star
key={i}
className="h-3 w-3 fill-amber-400 text-amber-400"
/>
);
} else if (i - 0.5 === roundedRating) {
stars.push(
<div key={i} className="relative w-3 h-3">
<Star className="absolute h-3 w-3 text-amber-400" />
<div className="absolute h-3 w-1.5 bg-white right-0 rounded-r"></div>
</div>
);
} else {
stars.push(<Star key={i} className="h-3 w-3 text-gray-300" />);
}
}

return (
<div className="flex items-center space-x-1">
<div className="flex">{stars}</div>
<span className="ml-2 text-xs font-medium text-gray-600 bg-gray-100 px-2 py-1 rounded-full">
{rating.toFixed(1)}
</span>
</div>
);
};

const renderStatusBadges = () => (
<div className="absolute top-3 right-3 z-20 flex flex-col gap-2">
{hasDiscount && (
<Badge
className="bg-gradient-to-r from-red-500 to-pink-600 text-white font-bold px-3 py-1 text-xs
animate-pulse shadow-lg border-0 rounded-full"
>
<Zap className="h-3 w-3 mr-1" />
{discountPercentage}% OFF
</Badge>
)}

{isNewProduct && (
<Badge className="bg-gradient-to-r from-green-500 to-emerald-600 text-white font-bold px-3 py-1 text-xs
shadow-lg border-0 rounded-full">
<Sparkles className="h-3 w-3 mr-1" />
NEW
</Badge>
)}

{isBestseller && (
<Badge className="bg-gradient-to-r from-orange-500 to-yellow-600 text-white font-bold px-3 py-1 text-xs
shadow-lg border-0 rounded-full">
<Award className="h-3 w-3 mr-1" />
BESTSELLER
</Badge>
)}

{isTrending && (
<Badge className="bg-gradient-to-r from-purple-500 to-indigo-600 text-white font-bold px-3 py-1 text-xs
shadow-lg border-0 rounded-full">
<TrendingUp className="h-3 w-3 mr-1" />
TRENDING
</Badge>
)}

{isLimitedTime && (
<Badge className="bg-gradient-to-r from-red-600 to-rose-700 text-white font-bold px-3 py-1 text-xs
animate-pulse shadow-lg border-0 rounded-full">
<Clock className="h-3 w-3 mr-1" />
LIMITED
</Badge>
)}
</div>
);

return (
<TooltipProvider>
<Card
ref={cardRef}
className={`
overflow-hidden shadow-lg rounded-2xl flex flex-col relative border-2 border-transparent bg-white
${getCardSizeClasses()}
${enableHoverEffects ? 'transition-all duration-300 hover:shadow-2xl hover:scale-105' : ''}
${isHovered ? 'border-purple-200 shadow-purple-100' : ''}
`}
onMouseEnter={handleMouseEnter}
onMouseLeave={handleMouseLeave}
>
{/* Status Badges */}
{renderStatusBadges()}

{/* Image Container */}
<div className="relative w-full aspect-square overflow-hidden bg-gradient-to-br from-purple-100 to-pink-100 rounded-t-2xl">
<Link href={`/product/${product.id}`} className="block w-full h-full">
{product.imageUrl || (product.images && product.images.length > 0) ? (
<>
<img
ref={imageRef}
src={product.images ? product.images[currentImageIndex] : product.imageUrl}
alt={product.name}
className={`
w-full h-full object-cover transition-all duration-500
${isHovered && enableHoverEffects ? 'scale-110' : 'scale-100'}
`}
onLoad={handleImageLoad}
onError={handleImageError}
/>
{isImageLoading && (
<div className="absolute inset-0 flex items-center justify-center bg-gradient-to-br from-purple-200 to-pink-200">
<div className="relative">
<div className="w-8 h-8 border-4 border-purple-300 border-t-purple-600 rounded-full animate-spin"></div>
<Sparkles className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 h-3 w-3 text-purple-600 animate-pulse" />
</div>
</div>
)}
</>
) : (
<div className="w-full h-full flex items-center justify-center bg-gradient-to-br from-purple-200 to-pink-200">
<ImagePlus className="h-12 w-12 text-purple-500 animate-bounce" />
</div>
)}
</Link>

{/* Floating Action Buttons */}
<div className="absolute top-3 left-3 flex flex-col gap-2 z-10">
<Tooltip>
<TooltipTrigger asChild>
<button
onClick={handleToggleWishlist}
className={`
p-2.5 rounded-full shadow-lg transition-all duration-300
${wishlistActive
? 'bg-gradient-to-r from-red-500 to-pink-600 text-white scale-110'
: 'bg-white/90 backdrop-blur-sm text-gray-600 hover:bg-red-50'
}
`}
aria-label={wishlistActive ? 'Remove from wishlist' : 'Add to wishlist'}
>
<Heart
className={`h-4 w-4 transition-all duration-300 ${
wishlistActive ? 'fill-current animate' : ''
}`}
/>
</button>
</TooltipTrigger>
<TooltipContent>
{wishlistActive ? 'Remove from wishlist' : 'Add to wishlist'}
</TooltipContent>
</Tooltip>

{showQuickActions && (
<>
<Tooltip>
<TooltipTrigger asChild>
<button
onClick={handleShare}
className="p-2.5 rounded-full shadow-lg bg-white/90 backdrop-blur-sm text-gray-600
hover:bg-blue-50 transition-all duration-300"
>
<Share2 className="h-4 w-4" />
</button>
</TooltipTrigger>
<TooltipContent>
Share product
</TooltipContent>
</Tooltip>
</>
)}
</div>

{/* Navigation Buttons */}
{hasMultipleImages && (
<>
<button
onClick={(e) => {
e.preventDefault();
prevImage();
}}
className={`
absolute left-2 top-1/2 transform -translate-y-1/2
bg-white/90 backdrop-blur-sm rounded-full p-2 shadow-lg
transition-all duration-300
${isHovered ? 'opacity-100' : 'opacity-0'}
`}
>
<ChevronLeft className="h-4 w-4 text-gray-700" />
</button>
<button
onClick={(e) => {
e.preventDefault();
nextImage();
}}
className={`
absolute right-2 top-1/2 transform -translate-y-1/2
bg-white/90 backdrop-blur-sm rounded-full p-2 shadow-lg
transition-all duration-300
${isHovered ? 'opacity-100' : 'opacity-0'}
`}
>
<ChevronRight className="h-4 w-4 text-gray-700" />
</button>
</>
)}

{/* Image Indicators */}
{hasMultipleImages && (
<div className="absolute bottom-3 left-0 right-0 flex justify-center space-x-2">
{product.images!.map((_, index: number) => (
<button
key={index}
onClick={(e) => {
e.preventDefault();
setCurrentImageIndex(index);
}}
className={`
h-2 rounded-full transition-all duration-300
${currentImageIndex === index
? 'w-6 bg-gradient-to-r from-purple-500 to-pink-500 shadow-lg'
: 'w-2 bg-white/70 hover:bg-white'
}
`}
/>
))}
</div>
)}

{/* Quick Add Button (appears on hover) */}
{enableHoverEffects && quantity === 0 && (
<div className={`
absolute bottom-4 left-1/2 transform -translate-x-1/2 transition-all duration-300
${isHovered ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'}
`}>
</div>
)}
</div>

{/* Content Section */}
<div className="p-5 flex flex-col flex-1 relative z-10">
<Link href={`/product/${product.id}`}>
<h3 className="font-semibold text-gray-900 text-lg leading-tight line-clamp-2 mb-2
hover:text-purple-600 transition-colors duration-200">
{product.name}
</h3>
</Link>

{/* Vendor and Features */}
<div className="flex flex-wrap gap-2 mb-3">
{product.vendor && (
<Badge variant="outline" className="text-xs font-medium bg-gradient-to-r from-blue-50 to-cyan-50
text-blue-700 border-blue-200 rounded-full px-3 py-1">
{product.vendor}
</Badge>
)}

{hasFreeSHipping && (
<Badge className="bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full">
<Truck className="h-3 w-3 mr-1" />
Free Shipping
</Badge>
)}

{hasWarranty && (
<Badge className="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full">
<Shield className="h-3 w-3 mr-1" />
Warranty
</Badge>
)}
</div>

{/* Rating Section */}
{rating && (
<div className="mb-3">
{renderStarRating(rating)}
</div>
)}

{/* Pricing */}
<div className="flex flex-col mb-4">
<div className="flex items-center flex-wrap gap-3">
<span className="text-2xl font-bold bg-gradient-to-r from-green-600 to-teal-600
bg-clip-text text-transparent">
â‚¹{price.toFixed(2)}
</span>
{hasDiscount && (
<span className="text-sm text-gray-500 line-through decoration-red-500">
â‚¹{originalPrice?.toFixed(2)}
</span>
)}
</div>
{hasDiscount && (
<div className="flex items-center mt-1">
<span className="text-sm font-semibold text-green-700 bg-green-100 px-2 py-1 rounded-full">
Save â‚¹{(originalPrice! - price).toFixed(2)}
</span>
</div>
)}
</div>

{/* Cart Controls */}
<div className="mt-auto">
{quantity > 0 ? (
<div className="flex items-center justify-between w-full rounded-xl border-2 border-gray-200
bg-gradient-to-r from-gray-50 to-white shadow-inner">
<Button
type="button"
variant="ghost"
size="icon"
className={`
rounded-l-xl transition-all duration-300
bg-gradient-to-r from-purple-600 to-pink-600 text-white
hover:from-purple-700 hover:to-pink-700
active:from-purple-800 active:to-pink-800
`}
onClick={handleDecrease}
>
<Minus className="h-4 w-4" />
</Button>
<span className="px-4 font-semibold text-lg text-gray-800 bg-gradient-to-r from-purple-600 to-pink-600
bg-clip-text text-transparent">
{quantity}
</span>
<Button
type="button"
variant="ghost"
size="icon"
className={`
rounded-r-xl transition-all duration-300
bg-gradient-to-r from-purple-600 to-pink-600 text-white
hover:from-purple-700 hover:to-pink-700
active:from-purple-800 active:to-pink-800
`}
onClick={handleIncrease}
disabled={quantity >= 10}
>
<Plus className="h-4 w-4" />
</Button>
</div>
) : (
<Button
type="button"
className={`
w-full py-3 rounded-xl font-semibold text-white shadow-lg transition-all duration-300
${justAdded
? 'bg-gradient-to-r from-green-500 to-emerald-600 scale-105'
: 'bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700'
}
disabled:from-gray-400 disabled:to-gray-500 disabled:cursor-not-allowed
hover:shadow-xl hover:scale-105
`}
onClick={() => {
const defaultCombo = product.hasVariants && product.variantCombinations?.length > 0
? product.variantCombinations[0]
: null;

const cartItem: any = {
productId: product.id,
quantity: 1,
price: defaultCombo?.price ?? product.price,
productName: product.name,
productImage: defaultCombo?.images?.[0] ?? product.images?.[0] ?? product.imageUrl,
hsnCode: product.hsnCode || '',
gst: product.gst || 0,
};

if (defaultCombo) {
cartItem.variantName = defaultCombo.combinationString;
cartItem.variantAttributes = defaultCombo.attributes;
cartItem.variantCombinationId = defaultCombo.id;
}

if (product.hasCustomization) {
cartItem.personalization = {
totalExtraCost: 0,
options: [],
};
}

console.log("ðŸ›’ Adding to cart:", cartItem);
addToCart(cartItem, 0);
setJustAdded(true);
setTimeout(() => setJustAdded(false), 1500);
}}
disabled={product.stock !== undefined && product.stock <= 0}
>
<div className="flex items-center justify-center space-x-2">
{justAdded ? (
<>
<Sparkles className="h-4 w-4 animate-spin" />
<span>Added to Cart!</span>
</>
) : (
<>
<ShoppingCart className="h-4 w-4" />
<span>Add to Cart</span>
</>
)}
</div>
</Button>
)}
</div>

{/* Stock Status */}
{product.stock !== undefined && (
<div className="mt-2 text-center">
{product.stock <= 0 ? (
<span className="text-red-600 font-medium text-sm bg-red-100 px-3 py-1 rounded-full">
Out of Stock
</span>
) : product.stock <= 5 ? (
<span className="text-orange-600 font-medium text-sm bg-orange-100 px-3 py-1 rounded-full animate-pulse">
<Flame className="h-3 w-3 inline mr-1" />
Only {product.stock} left!
</span>
) : null}
</div>
)}
</div>
</Card>
</TooltipProvider>
);
}
